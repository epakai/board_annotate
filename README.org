This is a tool for annotating circuit boards in Inkscape.

It takes:
    - a circuit board photo
    - chip photos
    - a yaml config with chip information and configuration options
    - an appropriate Inkscape document
Then you play a quick matching game, and it produces little colored annotations around the board image. See [[#screenshot]].

Only tested with Inkscape 1.2.2. Requires Inkscape 1.2 or higher.

All images are embedded in the SVG (for now).

* Install 

For now, put the 'board_annotate' py, ui, and inx files into the directory indicated by =Edit -> Preferences -> System: User extensions=.

It should appear in Inkscape's =Extensions -> Render= menu as 'Board Annotate'.

* Steps

** Preparation
- throw the board and chips images into a folder
- edit photos (adjust alignment, crop, rotate, adjust contrast)
    + about 10 minutes for 16 chips using gphoto
- create a yaml config like:

#+BEGIN_SRC yaml
gutter: horizontal
board_photo: board.jpg
chips:
  - name: Chip 1
    chip_photo: chip1.jpg
    description: About Chip 1
  - name: Chip 2
    chip_photo: chip2.jpg
    description: About Chip 2
#+END_SRC

For empty fields, use "". =chip_photo= and =description= can be empty

=chip_photo= can be an absolute path, otherwise it is relative to the yaml file.

=gutter= sets where the annotations are drawn. It can be =horizontal= (drawn above and below, or =vertical= (drawn on the left and right).

** In Inkscape
- create a new image
- put the board photo in it
- probably resize it to use one full dimension of the page
- leave gutter space above​/below or on the left​/right
    + gutters don't have to be even
- draw a rectangle on top of every chip
- select the rectangles
- run the extension (=Extensions > Render > Board Annotate=)

** The extension
- select your yaml file with the file picker, hit apply
- match chips to images 
    + select each chip from the bottom icon view
    + look at the large context image
    + pick a chip from the list on the right
- hit apply once all chips have been matched
- images will be embedded, and annotations drawn

See [[file:usage.org][usage]]

* Other config options
** image_ratio
Annotations have a ratio between image and text. The default is 0.6 (image). It can be set like:

#+BEGIN_SRC yaml
image_ratio: 0.4
#+END_SRC

Bigger image ratios:
    - increase the gutter fill (less empty space)
    - make the text area wider and shorter
    - probably don't make sense for vertical gutters

Smaller image ratios:
    - reduce fill (useful if the gutters are over full)
    - make the text area narrower, and taller

** palette and colors

Palettes set the colors of the annotation surround, connectors, chip location rectangle, and layer highlight color. 

There are a few built-in color palettes. They are specified with 'palette' key, and can be:
- =default= :: SVG named colors excluding light/dark/medium, and colors I found undesirable (whites, blacks, greys, brows, beiges).
- =dark= :: SVG named colors starting with 'dark'
- =light= :: SVG named colors starting with 'light' or 'pale'
- =medium= :: SVG named colors starting with 'medium'
- =all= :: all of the above combined in that order
- =all_random= :: all, but sorted randomly

Palette can also be set to =custom= or =custom_random=. Custom requires a second key, =colors=, for the list of colors. These can be color names, HTML color codes (must be quoted), integers, or hex values.

There is no minimum, the color list will repeat when exhausted.

Here's an example:

#+BEGIN_SRC yaml
palette: custom
colors:
  - '#263C8B'
  - 0x4e74A6FF
  - beige
  - goldenrod
  - "#2E231F"
#+END_SRC

* Screenshot

[[screenshot.png]]

* TODO Things to be done, probably
** GUI stuff
- New GUI issues
    + Buttons don't animate
        * seems to apply to Extension manager as well
        * probably something off with their event loop, beyond me
    + Sometimes the selection goes to the next chip when operating quickly
        + maybe can simultaneously trigger update match and change selection 

** Testing and edge cases
- test with bad file paths
- test with empty name, description, photo etc.
- what if chip names are duplicate?
- what happens if the gutter fills up?
- what happens if both gutters fills up?
- what happens with rects in the gutter?
    + overlapping the gutter?
    + outside the page?
    + straddling the page border?
- Orientation mismatch between image and config
    + everything ends up tiny and jammed into corner
    + could probably do a check for odd gutter sizes
- Lots of missing input verification when accessing the yaml config
- Newer inkscapes
- Windows, Mac

** Bugs
- Undo doesn't restore the selection. I think it was working previously.
- Connectors can pass through empty parts of the gutter
    + I could fill empty gutter space with rects that set 'connector-avoid', but that doesn't help with the current left to right gutter fill, and it makes extra work if the user wants to modify the arrangement.

** Enhancements
- Gutter filling is overly simple
    + Currently we fill left to right, and try to keep gutters evenly filled
    + My better idea:
        * Pick a dividing line that makes for roughly equal gutter fill
        * Position every annotation directly above its first matching chip
        * Work from the center and bump overlapping annotations outward
        * Drawing becomes a separate step
- Could probably determine gutter orientation automatically
- More user appearance settings:
    + fonts, sizes, text color, backgrounds
    + box/path stroke width
- Allow non-rect shapes (for annotating areas and functional blocks)
- Connectors could be optional (just outline the chip and annotation)
- Write back matches to the yaml file? 
    + would make it much easier to iterate if the match set hasn't changed
    + would need a checkbox to save matches
    + an option somewhere to erase matches
    + extra checks to ensure matching rectangles still exist
- dashed rects indicate reverse, but it looks bad
- Resize embedded images to match DPI. 
    + Could be worth automating to reduce output SVG size.
    + Edit > Make a Bitmap Copy
    + This makes a copy with the DPI based on an Inkscape preference
    + Then grab the original and delete it
- A layout more suited for text only (no zoomed chip photos)
- Avoid colors close to the circuit board color
    + probably average the GdkPixbuf colors, and skip colors close to it
- maybe allow groups in the selection but filter them for processing
    + does selecting a group automatically include its children?
- non-embedded photos
- ability to pull zoomed chip images from the main image
    + I used a separate microscope for my chip images
    + Some board photos are good enough quality to serve both purposes

* Other considerations
- genericize the names, this can probably be used for non-circuit board things
    + Board annotate -> image_annotate
    + board_photo -> main_photo
    + chip_photo -> sub_photo
    + chip 
    + board
